spring.application.name=api-gateway

spring.cloud.gateway.discovery.locator.enable=true      //Is another way to @EnableEurekaClient

eureka.instance.instance-id=${spring.application.name}:${random.uuid}

spring.cloud.loadbalancer.ribbon.enabled=false      //Disable the clasic load balancer from netflix. The idea is to use the new load balancer from spring.cloud

spring.cloud.gateway.routes[0].id= product-microservice
spring.cloud.gateway.routes[0].uri=lb://PRODUCT-MICROSERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/v1/api/products/**, /api/categories/**, /v1/api/save/product/**, /test/**

spring.cloud.gateway.routes[1].id= booking-microservice
spring.cloud.gateway.routes[1].uri=lb://BOOKING-MICROSERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/v1/api/booking/**

spring.cloud.gateway.default-filters=TokenRelay

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:9090/realms/my_microservice_realm
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=spring-cloud-gateway-client
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=wuj673cqpskSHKxeSovtRJsGgQ05FoNA
spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak
spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8080/login/oauth2/code/spring-cloud-gateway-client

spring.main.allow-bean-definition-overriding=true

